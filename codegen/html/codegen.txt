-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | parse torch yaml spec files, generate code
--   
--   parse torch yaml spec files, generate code
@package codegen
@version 0.1.0.0

module ParseFunctionSig
data DefaultValue
ValBool :: Bool -> DefaultValue
ValInt :: Int -> DefaultValue
ValDouble :: Double -> DefaultValue
ValDict :: DefaultValue
ValArray :: DefaultValue
AtKLong :: DefaultValue
ReductionMean :: DefaultValue
NullPtr :: DefaultValue
ValNone :: DefaultValue
data Parameter
Parameter :: Parsable -> String -> Maybe DefaultValue -> Parameter
[ptype] :: Parameter -> Parsable
[pname] :: Parameter -> String
[val] :: Parameter -> Maybe DefaultValue
Star :: Parameter
data Variants
VFunction :: Variants
VMethod :: Variants
VOperator :: Variants
data Function
Function :: String -> [Parameter] -> Parsable -> Variants -> Function
[name] :: Function -> String
[parameters] :: Function -> [Parameter]
[retType] :: Function -> Parsable
[variant] :: Function -> Variants
type SignatureStr = String
type CppTypeStr = String
type HsTypeStr = String
data Parsable
Ptr :: Parsable -> Parsable
TenType :: TenType -> Parsable
DeviceType :: Parsable
GeneratorType :: Parsable
StorageType :: Parsable
CType :: CType -> Parsable
STLType :: STLType -> Parsable
CppString :: Parsable
Tuple :: [Parsable] -> Parsable
CppClass :: SignatureStr -> CppTypeStr -> HsTypeStr -> Parsable
Backend :: Parsable
Layout :: Parsable
MemoryFormat :: Parsable
QScheme :: Parsable
ConstQuantizerPtr :: Parsable
Dimname :: Parsable
DimnameList :: Parsable
Symbol :: Parsable
IValue :: Parsable
data CType
CBool :: CType
CVoid :: CType
CFloat :: CType
CDouble :: CType
CSize :: CType
CInt :: CType
CUInt8 :: CType
CUInt16 :: CType
CUInt32 :: CType
CUInt64 :: CType
CInt8 :: CType
CInt16 :: CType
CInt32 :: CType
CInt64 :: CType
CInt64Q :: CType
data STLType
Array :: CType -> Int -> STLType
data TenType
Scalar :: TenType
Tensor :: TenType
TensorA :: TenType
TensorA' :: TenType
TensorAQ :: TenType
TensorAQ' :: TenType
TensorQ :: TenType
TensorAVector :: TenType
TensorOptions :: TenType
TensorList :: TenType
IntegerTensor :: TenType
IndexTensor :: TenType
BoolTensor :: TenType
BoolTensorQ :: TenType
ByteTensor :: TenType
LongTensor :: TenType
IntList :: Maybe [Int] -> TenType
[dim] :: TenType -> Maybe [Int]
ScalarQ :: TenType
ScalarType :: TenType
type Parser = Parsec Void String
cppClassList :: [(String, String, String)]
defBool :: Parser DefaultValue
defInt :: Parser DefaultValue
defFloat :: Parser DefaultValue
sc :: Parser ()
lexm :: Parser a -> Parser a
parens :: Parser a -> Parser a
pinteger :: Parser Integer
pfloat :: Parser Float
rword :: String -> Parser ()
rws :: [String]
identStart :: [Char]
identLetter :: [Char]

-- | parser of identifier
--   
--   <pre>
--   &gt;&gt;&gt; parseTest identifier "fft"
--   "fft"
--   
--   &gt;&gt;&gt; parseTest identifier "_fft"
--   "_fft"
--   </pre>
identifier :: Parser String

-- | parser of identifier
--   
--   <pre>
--   &gt;&gt;&gt; parseTest typ "BoolTensor"
--   TenType BoolTensor
--   
--   &gt;&gt;&gt; parseTest typ "BoolTensor?"
--   TenType BoolTensorQ
--   
--   &gt;&gt;&gt; parseTest typ "ByteTensor"
--   TenType ByteTensor
--   
--   &gt;&gt;&gt; parseTest typ "Device"
--   DeviceType
--   
--   &gt;&gt;&gt; parseTest typ "Generator*"
--   Ptr GeneratorType
--   
--   &gt;&gt;&gt; parseTest typ "Generator *"
--   Ptr GeneratorType
--   
--   &gt;&gt;&gt; parseTest typ "IndexTensor"
--   TenType IndexTensor
--   
--   &gt;&gt;&gt; parseTest typ "IntegerTensor"
--   TenType IntegerTensor
--   
--   &gt;&gt;&gt; parseTest typ "IntArrayRef"
--   TenType (IntList {dim = Nothing})
--   
--   &gt;&gt;&gt; parseTest typ "IntList"
--   TenType (IntList {dim = Nothing})
--   
--   &gt;&gt;&gt; parseTest typ "IntList[1]"
--   TenType (IntList {dim = Just [1]})
--   
--   &gt;&gt;&gt; parseTest typ "int[]"
--   TenType (IntList {dim = Just []})
--   
--   &gt;&gt;&gt; parseTest typ "int[1]"
--   TenType (IntList {dim = Just [1]})
--   
--   &gt;&gt;&gt; parseTest typ "ScalarType"
--   TenType ScalarType
--   
--   &gt;&gt;&gt; parseTest typ "real"
--   TenType Scalar
--   
--   &gt;&gt;&gt; parseTest typ "accreal"
--   TenType Scalar
--   
--   &gt;&gt;&gt; parseTest typ "Scalar"
--   TenType Scalar
--   
--   &gt;&gt;&gt; parseTest typ "Scalar?"
--   TenType ScalarQ
--   
--   &gt;&gt;&gt; parseTest typ "ScalarType"
--   TenType ScalarType
--   
--   &gt;&gt;&gt; parseTest typ "Backend"
--   Backend
--   
--   &gt;&gt;&gt; parseTest typ "Layout"
--   Layout
--   
--   &gt;&gt;&gt; parseTest typ "MemoryFormat"
--   MemoryFormat
--   
--   &gt;&gt;&gt; parseTest typ "QScheme"
--   QScheme
--   
--   &gt;&gt;&gt; parseTest typ "Dimname"
--   Dimname
--   
--   &gt;&gt;&gt; parseTest typ "DimnameList"
--   DimnameList
--   
--   &gt;&gt;&gt; parseTest typ "Symbol"
--   Symbol
--   
--   &gt;&gt;&gt; parseTest typ "IValue"
--   IValue
--   
--   &gt;&gt;&gt; parseTest typ "Storage"
--   StorageType
--   
--   &gt;&gt;&gt; parseTest typ "Tensor"
--   TenType Tensor
--   
--   &gt;&gt;&gt; parseTest typ "Tensor?"
--   TenType TensorQ
--   
--   &gt;&gt;&gt; parseTest typ "Tensor(a)"
--   TenType TensorA
--   
--   &gt;&gt;&gt; parseTest typ "Tensor(a!)"
--   TenType TensorA'
--   
--   &gt;&gt;&gt; parseTest typ "Tensor(a)[]"
--   TenType TensorAVector
--   
--   &gt;&gt;&gt; parseTest typ "Tensor[]"
--   TenType TensorList
--   
--   &gt;&gt;&gt; parseTest typ "Tensor?[]"
--   TenType TensorList
--   
--   &gt;&gt;&gt; parseTest typ "TensorList"
--   TenType TensorList
--   
--   &gt;&gt;&gt; parseTest typ "TensorOptions"
--   TenType TensorOptions
--   
--   &gt;&gt;&gt; parseTest typ "bool"
--   CType CBool
--   
--   &gt;&gt;&gt; parseTest typ "double"
--   CType CDouble
--   
--   &gt;&gt;&gt; parseTest typ "float"
--   CType CFloat
--   
--   &gt;&gt;&gt; parseTest typ "int"
--   CType CInt
--   
--   &gt;&gt;&gt; parseTest typ "int?"
--   CType CInt
--   
--   &gt;&gt;&gt; parseTest typ "int64_t"
--   CType CInt64
--   
--   &gt;&gt;&gt; parseTest typ "int64_t?"
--   CType CInt64Q
--   
--   &gt;&gt;&gt; parseTest typ "size_t"
--   CType CSize
--   
--   &gt;&gt;&gt; parseTest typ "std::array&lt;bool,2&gt;"
--   STLType (Array CBool 2)
--   
--   &gt;&gt;&gt; parseTest typ "bool[2]"
--   STLType (Array CBool 2)
--   
--   &gt;&gt;&gt; parseTest typ "std::string"
--   CppString
--   
--   &gt;&gt;&gt; parseTest typ "str"
--   CppString
--   </pre>
typ :: Parser Parsable

-- | parser of defaultValue
--   
--   <pre>
--   &gt;&gt;&gt; parseTest defaultValue "-100"
--   ValInt (-100)
--   
--   &gt;&gt;&gt; parseTest defaultValue "20"
--   ValInt 20
--   
--   &gt;&gt;&gt; parseTest defaultValue "0.125"
--   ValDouble 0.125
--   
--   &gt;&gt;&gt; parseTest defaultValue "1e-8"
--   ValDouble 1.0e-8
--   
--   &gt;&gt;&gt; parseTest defaultValue "False"
--   ValBool False
--   
--   &gt;&gt;&gt; parseTest defaultValue "None"
--   ValNone
--   
--   &gt;&gt;&gt; parseTest defaultValue "Reduction::Mean"
--   ReductionMean
--   
--   &gt;&gt;&gt; parseTest defaultValue "Mean"
--   ReductionMean
--   
--   &gt;&gt;&gt; parseTest defaultValue "True"
--   ValBool True
--   
--   &gt;&gt;&gt; parseTest defaultValue "at::kLong"
--   AtKLong
--   
--   &gt;&gt;&gt; parseTest defaultValue "false"
--   ValBool False
--   
--   &gt;&gt;&gt; parseTest defaultValue "nullptr"
--   NullPtr
--   
--   &gt;&gt;&gt; parseTest defaultValue "true"
--   ValBool True
--   
--   &gt;&gt;&gt; parseTest defaultValue "{0,1}"
--   ValDict
--   
--   &gt;&gt;&gt; parseTest defaultValue "{}"
--   ValDict
--   
--   &gt;&gt;&gt; parseTest defaultValue "[0,1]"
--   ValArray
--   
--   &gt;&gt;&gt; parseTest defaultValue "[]"
--   ValArray
--   </pre>
defaultValue :: Parser DefaultValue

-- | parser of argument
--   
--   <pre>
--   &gt;&gt;&gt; parseTest arg "*"
--   Star
--   
--   &gt;&gt;&gt; parseTest arg "Tensor self"
--   Parameter {ptype = TenType Tensor, pname = "self", val = Nothing}
--   
--   &gt;&gt;&gt; Right v = parse (sepBy arg (lexm (string ","))) "" "Tensor self, Tensor self"
--   
--   &gt;&gt;&gt; map ptype v
--   [TenType Tensor,TenType Tensor]
--   
--   &gt;&gt;&gt; Right v = parse (sepBy arg (lexm (string ","))) "" "Tensor self, Tensor? self"
--   
--   &gt;&gt;&gt; map ptype v
--   [TenType Tensor,TenType TensorQ]
--   </pre>
arg :: Parser Parameter

-- | parser of argument
--   
--   <pre>
--   &gt;&gt;&gt; parseTest rettype "Tensor"
--   TenType Tensor
--   
--   &gt;&gt;&gt; parseTest rettype "Tensor hoo"
--   TenType Tensor
--   
--   &gt;&gt;&gt; parseTest rettype "(Tensor hoo,Tensor bar)"
--   Tuple [TenType Tensor,TenType Tensor] 
--   </pre>
rettype :: Parser Parsable

-- | parser of function
--   
--   <pre>
--   &gt;&gt;&gt; parseTest func "log10_(Tensor self) -&gt; Tensor"
--   Function {name = "log10_", parameters = [Parameter {ptype = TenType Tensor, pname = "self", val = Nothing}], retType = TenType Tensor, variant = VFunction}
--   
--   &gt;&gt;&gt; parseTest func "fft(Tensor self, int64_t signal_ndim, bool normalized=false) -&gt; Tensor"
--   Function {name = "fft", parameters = [Parameter {ptype = TenType Tensor, pname = "self", val = Nothing},Parameter {ptype = CType CInt64, pname = "signal_ndim", val = Nothing},Parameter {ptype = CType CBool, pname = "normalized", val = Just (ValBool False)}], retType = TenType Tensor, variant = VFunction}
--   
--   &gt;&gt;&gt; parseTest func "frobenius_norm_out(Tensor result, Tensor self, IntList[1] dim, bool keepdim=false) -&gt; Tensor"
--   Function {name = "frobenius_norm_out", parameters = [Parameter {ptype = TenType Tensor, pname = "result", val = Nothing},Parameter {ptype = TenType Tensor, pname = "self", val = Nothing},Parameter {ptype = TenType (IntList {dim = Just [1]}), pname = "dim", val = Nothing},Parameter {ptype = CType CBool, pname = "keepdim", val = Just (ValBool False)}], retType = TenType Tensor, variant = VFunction}
--   
--   &gt;&gt;&gt; parseTest func "thnn_conv_dilated3d_forward(Tensor self, Tensor weight, IntList[3] kernel_size, Tensor? bias, IntList[3] stride, IntList[3] padding, IntList[3] dilation) -&gt; (Tensor output, Tensor columns, Tensor ones)"
--   Function {name = "thnn_conv_dilated3d_forward", parameters = [Parameter {ptype = TenType Tensor, pname = "self", val = Nothing},Parameter {ptype = TenType Tensor, pname = "weight", val = Nothing},Parameter {ptype = TenType (IntList {dim = Just [3]}), pname = "kernel_size", val = Nothing},Parameter {ptype = TenType TensorQ, pname = "bias", val = Nothing},Parameter {ptype = TenType (IntList {dim = Just [3]}), pname = "stride", val = Nothing},Parameter {ptype = TenType (IntList {dim = Just [3]}), pname = "padding", val = Nothing},Parameter {ptype = TenType (IntList {dim = Just [3]}), pname = "dilation", val = Nothing}], retType = Tuple [TenType Tensor,TenType Tensor,TenType Tensor], variant = VFunction}
--   </pre>
func :: Parser Function
test :: IO ()
parseFuncSig :: String -> Either (ParseErrorBundle String Void) Function
instance GHC.Show.Show ParseFunctionSig.Function
instance GHC.Classes.Eq ParseFunctionSig.Function
instance GHC.Show.Show ParseFunctionSig.Parameter
instance GHC.Classes.Eq ParseFunctionSig.Parameter
instance GHC.Generics.Generic ParseFunctionSig.Parsable
instance GHC.Show.Show ParseFunctionSig.Parsable
instance GHC.Classes.Eq ParseFunctionSig.Parsable
instance GHC.Show.Show ParseFunctionSig.TenType
instance GHC.Classes.Eq ParseFunctionSig.TenType
instance GHC.Generics.Generic ParseFunctionSig.STLType
instance GHC.Show.Show ParseFunctionSig.STLType
instance GHC.Classes.Eq ParseFunctionSig.STLType
instance GHC.Enum.Enum ParseFunctionSig.CType
instance GHC.Enum.Bounded ParseFunctionSig.CType
instance GHC.Generics.Generic ParseFunctionSig.CType
instance GHC.Show.Show ParseFunctionSig.CType
instance GHC.Classes.Eq ParseFunctionSig.CType
instance GHC.Show.Show ParseFunctionSig.Variants
instance GHC.Classes.Eq ParseFunctionSig.Variants
instance GHC.Show.Show ParseFunctionSig.DefaultValue
instance GHC.Classes.Eq ParseFunctionSig.DefaultValue
instance Data.Aeson.Types.FromJSON.FromJSON ParseFunctionSig.Function
instance Data.Aeson.Types.FromJSON.FromJSON ParseFunctionSig.Parsable

module ParseDeclarations
data Type
Type :: String -> Parsable -> String -> Maybe Int -> Maybe String -> Type
[name'] :: Type -> String
[dynamic_type'] :: Type -> Parsable
[type'] :: Type -> String
[size'] :: Type -> Maybe Int
[default'] :: Type -> Maybe String
type2type :: Type -> Parsable
data Mode
TH :: Mode
THC :: Mode
NN :: Mode
Native :: Mode
data Declaration
Declaration :: String -> Bool -> String -> String -> [Type] -> [String] -> Mode -> String -> [Type] -> Bool -> Maybe Bool -> Bool -> Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Declaration
[name] :: Declaration -> String
[matches_jit_signature] :: Declaration -> Bool
[schema_string] :: Declaration -> String
[method_prefix_derived] :: Declaration -> String
[arguments] :: Declaration -> [Type]
[method_of] :: Declaration -> [String]
[mode] :: Declaration -> Mode
[python_module] :: Declaration -> String
[returns] :: Declaration -> [Type]
[inplace] :: Declaration -> Bool
[is_factory_method] :: Declaration -> Maybe Bool
[abstract] :: Declaration -> Bool
[requires_tensor] :: Declaration -> Bool
[device_guard] :: Declaration -> Maybe Bool
[with_gil] :: Declaration -> Maybe Bool
[deprecated] :: Declaration -> Maybe Bool
instance GHC.Generics.Generic ParseDeclarations.Declaration
instance GHC.Classes.Eq ParseDeclarations.Declaration
instance GHC.Show.Show ParseDeclarations.Declaration
instance GHC.Generics.Generic ParseDeclarations.Mode
instance GHC.Classes.Eq ParseDeclarations.Mode
instance GHC.Show.Show ParseDeclarations.Mode
instance GHC.Generics.Generic ParseDeclarations.Type
instance GHC.Classes.Eq ParseDeclarations.Type
instance GHC.Show.Show ParseDeclarations.Type
instance Data.Aeson.Types.FromJSON.FromJSON ParseDeclarations.Declaration
instance Data.Aeson.Types.FromJSON.FromJSON ParseDeclarations.Mode
instance Data.Aeson.Types.FromJSON.FromJSON ParseDeclarations.Type

module ParseClass
data CppClassSpec
CppClassSpec :: String -> String -> String -> [Function] -> [Function] -> [Function] -> CppClassSpec
[signature] :: CppClassSpec -> String
[cppname] :: CppClassSpec -> String
[hsname] :: CppClassSpec -> String
[constructors] :: CppClassSpec -> [Function]
[methods] :: CppClassSpec -> [Function]
[functions] :: CppClassSpec -> [Function]
trimSpace :: String -> String
hasSpace :: String -> Bool
hsnameWithoutSpace :: CppClassSpec -> String
hsnameWithParens :: CppClassSpec -> String
instance GHC.Generics.Generic ParseClass.CppClassSpec
instance GHC.Classes.Eq ParseClass.CppClassSpec
instance GHC.Show.Show ParseClass.CppClassSpec
instance Data.Aeson.Types.FromJSON.FromJSON ParseClass.CppClassSpec

module ParseTuples
data Tuple
Tuple :: [Parsable] -> Tuple
[types] :: Tuple -> [Parsable]
instance GHC.Generics.Generic ParseTuples.Tuple
instance GHC.Classes.Eq ParseTuples.Tuple
instance GHC.Show.Show ParseTuples.Tuple
instance Data.Aeson.Types.FromJSON.FromJSON ParseTuples.Tuple

module RenderCommon
bra :: Text
cket :: Text
tenTypeToCppType :: TenType -> Text
ctypeToCppType :: CType -> Text
stltypeToCppType :: STLType -> Text
parsableToCppType :: Parsable -> Text
tenTypeToHsType :: TenType -> Text
tenTypeToHigherHsType :: TenType -> Text
stltypeToHsType :: STLType -> Text
stltypeToHigherHsType :: STLType -> Text
ctypeToHsType :: CType -> Text
ctypeToHigherHsType :: CType -> Text
withParens :: Text -> Text
parsableToHsType :: Parsable -> Text
parsableToHigherHsType :: Parsable -> Text
tenTypeToInitial :: TenType -> Text
stltypeToInitial :: STLType -> Text
ctypeToInitial :: CType -> Text
parsableToInitial :: Parsable -> Text
isCType :: Parsable -> Bool
isGenerator :: Parsable -> Bool
isNotStar :: Parameter -> Bool
retToCppType :: Parsable -> Text
toHsFuncName :: Bool -> String -> String
functionToCpp :: Bool -> Bool -> String -> String -> Function -> Text
methodToCpp :: CppClassSpec -> Bool -> Bool -> Bool -> String -> String -> Function -> Text
getSignatures :: Function -> String
pureFunction :: String -> Function -> Text

module RenderClass
renderImport :: Bool -> CppClassSpec -> Text
renderConstructors :: Bool -> CppClassSpec -> Text
renderDestructor :: Bool -> CppClassSpec -> Text
renderMethods :: Bool -> CppClassSpec -> Text
renderFunctions :: Bool -> CppClassSpec -> Text
decodeAndCodeGen :: String -> String -> IO ()
template :: Bool -> Text -> CppClassSpec -> Text

module RenderDeclarations
dropGenerator :: [Parameter] -> [Parameter]
addFunctionWithDefaultArguments :: Declaration -> [Declaration]
toFunction :: Declaration -> Function
uniqFilter :: Ord n => (a -> n) -> [a] -> [a]
renderFunctions :: Bool -> Bool -> String -> [Declaration] -> Text
decodeAndCodeGen :: String -> String -> IO ()
renderImport :: Bool -> Bool -> Text -> Text
template :: Bool -> Bool -> Text -> Text -> Text
typeTemplate :: Text

module RenderPure
data Binding
BindRename :: String -> String -> Binding
[src] :: Binding -> String
[dst] :: Binding -> String
Bind :: String -> Binding
[src] :: Binding -> String
BindRemove :: String -> Binding
[src] :: Binding -> String
toFunction :: Declaration -> Function
renderFunctions :: [(String, Declaration)] -> Text
isRemove :: Binding -> Bool
isRename :: Binding -> Bool
removeBinding :: Binding -> (String, Declaration) -> Bool
removeBinding' :: [Binding] -> (String, Declaration) -> Bool
removeFilter :: [Binding] -> [(String, Declaration)] -> [(String, Declaration)]
renameBinding :: Binding -> (String, Declaration) -> Maybe (String, Declaration)
renameBinding' :: [Binding] -> (String, Declaration) -> (String, Declaration)
renameFilter :: [Binding] -> [(String, Declaration)] -> [(String, Declaration)]
nativeFunctionsFilter :: [Declaration] -> [Binding] -> [(String, Declaration)]
notUniqList :: [String] -> [String]
decodeAndCodeGen :: String -> String -> String -> IO ()
renderImport :: Text
template :: Text -> Text -> Text
instance GHC.Generics.Generic RenderPure.Binding
instance GHC.Classes.Eq RenderPure.Binding
instance GHC.Show.Show RenderPure.Binding
instance Data.Aeson.Types.FromJSON.FromJSON RenderPure.Binding

module RenderTuples
renderImport :: Bool -> Text
tupleToCpp :: Tuple -> Text
tupleToHs :: Tuple -> Text
tupleToHs' :: Tuple -> Text
toHs :: Parsable -> Text
toManagedHs :: Parsable -> Text
toCpp :: Parsable -> Text
toCpp' :: Parsable -> Text
renderCppObject :: Tuple -> Text
renderCppTuple2 :: Tuple -> Text
renderCppTuple3 :: Tuple -> Text
renderCppTuple4 :: Tuple -> Text
renderCppTuple5 :: Tuple -> Text
renderManagedCppTuple2 :: Tuple -> Text
renderManagedCppTuple3 :: Tuple -> Text
renderManagedCppTuple4 :: Tuple -> Text
renderManagedCppTuple5 :: Tuple -> Text
renderTuples :: Bool -> [Tuple] -> Text
decodeAndCodeGen :: String -> String -> IO ()
template :: Bool -> Text -> [Tuple] -> Text
